/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PrinterSheet as PrismaPrinterSheet } from "@prisma/client";

export class PrinterSheetServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PrinterSheetCountArgs, "select">
  ): Promise<number> {
    return this.prisma.printerSheet.count(args);
  }

  async printerSheets<T extends Prisma.PrinterSheetFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrinterSheetFindManyArgs>
  ): Promise<PrismaPrinterSheet[]> {
    return this.prisma.printerSheet.findMany<Prisma.PrinterSheetFindManyArgs>(
      args
    );
  }
  async printerSheet<T extends Prisma.PrinterSheetFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrinterSheetFindUniqueArgs>
  ): Promise<PrismaPrinterSheet | null> {
    return this.prisma.printerSheet.findUnique(args);
  }
  async createPrinterSheet<T extends Prisma.PrinterSheetCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrinterSheetCreateArgs>
  ): Promise<PrismaPrinterSheet> {
    return this.prisma.printerSheet.create<T>(args);
  }
  async updatePrinterSheet<T extends Prisma.PrinterSheetUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrinterSheetUpdateArgs>
  ): Promise<PrismaPrinterSheet> {
    return this.prisma.printerSheet.update<T>(args);
  }
  async deletePrinterSheet<T extends Prisma.PrinterSheetDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrinterSheetDeleteArgs>
  ): Promise<PrismaPrinterSheet> {
    return this.prisma.printerSheet.delete(args);
  }
}
