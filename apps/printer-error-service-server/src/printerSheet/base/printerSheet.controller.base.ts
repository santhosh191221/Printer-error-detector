/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PrinterSheetService } from "../printerSheet.service";
import { PrinterSheetCreateInput } from "./PrinterSheetCreateInput";
import { PrinterSheet } from "./PrinterSheet";
import { PrinterSheetFindManyArgs } from "./PrinterSheetFindManyArgs";
import { PrinterSheetWhereUniqueInput } from "./PrinterSheetWhereUniqueInput";
import { PrinterSheetUpdateInput } from "./PrinterSheetUpdateInput";

export class PrinterSheetControllerBase {
  constructor(protected readonly service: PrinterSheetService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PrinterSheet })
  async createPrinterSheet(
    @common.Body() data: PrinterSheetCreateInput
  ): Promise<PrinterSheet> {
    return await this.service.createPrinterSheet({
      data: data,
      select: {
        createdAt: true,
        id: true,
        missingNozzles: true,
        sectionData: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PrinterSheet] })
  @ApiNestedQuery(PrinterSheetFindManyArgs)
  async printerSheets(@common.Req() request: Request): Promise<PrinterSheet[]> {
    const args = plainToClass(PrinterSheetFindManyArgs, request.query);
    return this.service.printerSheets({
      ...args,
      select: {
        createdAt: true,
        id: true,
        missingNozzles: true,
        sectionData: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PrinterSheet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async printerSheet(
    @common.Param() params: PrinterSheetWhereUniqueInput
  ): Promise<PrinterSheet | null> {
    const result = await this.service.printerSheet({
      where: params,
      select: {
        createdAt: true,
        id: true,
        missingNozzles: true,
        sectionData: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PrinterSheet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePrinterSheet(
    @common.Param() params: PrinterSheetWhereUniqueInput,
    @common.Body() data: PrinterSheetUpdateInput
  ): Promise<PrinterSheet | null> {
    try {
      return await this.service.updatePrinterSheet({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          missingNozzles: true,
          sectionData: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PrinterSheet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePrinterSheet(
    @common.Param() params: PrinterSheetWhereUniqueInput
  ): Promise<PrinterSheet | null> {
    try {
      return await this.service.deletePrinterSheet({
        where: params,
        select: {
          createdAt: true,
          id: true,
          missingNozzles: true,
          sectionData: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
