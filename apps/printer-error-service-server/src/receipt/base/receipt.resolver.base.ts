/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Receipt } from "./Receipt";
import { ReceiptCountArgs } from "./ReceiptCountArgs";
import { ReceiptFindManyArgs } from "./ReceiptFindManyArgs";
import { ReceiptFindUniqueArgs } from "./ReceiptFindUniqueArgs";
import { CreateReceiptArgs } from "./CreateReceiptArgs";
import { UpdateReceiptArgs } from "./UpdateReceiptArgs";
import { DeleteReceiptArgs } from "./DeleteReceiptArgs";
import { ReceiptService } from "../receipt.service";
@graphql.Resolver(() => Receipt)
export class ReceiptResolverBase {
  constructor(protected readonly service: ReceiptService) {}

  async _receiptsMeta(
    @graphql.Args() args: ReceiptCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Receipt])
  async receipts(
    @graphql.Args() args: ReceiptFindManyArgs
  ): Promise<Receipt[]> {
    return this.service.receipts(args);
  }

  @graphql.Query(() => Receipt, { nullable: true })
  async receipt(
    @graphql.Args() args: ReceiptFindUniqueArgs
  ): Promise<Receipt | null> {
    const result = await this.service.receipt(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Receipt)
  async createReceipt(
    @graphql.Args() args: CreateReceiptArgs
  ): Promise<Receipt> {
    return await this.service.createReceipt({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Receipt)
  async updateReceipt(
    @graphql.Args() args: UpdateReceiptArgs
  ): Promise<Receipt | null> {
    try {
      return await this.service.updateReceipt({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Receipt)
  async deleteReceipt(
    @graphql.Args() args: DeleteReceiptArgs
  ): Promise<Receipt | null> {
    try {
      return await this.service.deleteReceipt(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
